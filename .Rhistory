---
title: ""
output: html_document
---
install.packages("RefManageR")
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(DT)
library(tidyverse)
library(lingtypology)
library(ggpubr)
library(RefManageR)
# link references in table to bib file
bib_feat <- ReadBib(file = "bibliography.bib")
BibOptions(style = "html", bib.style = "authoryear", cite.style = "authoryear", max.names = 2)
# necessary data
trans <- read_tsv("data/transcription_correspondences.csv") # transcription correspondences
vill <- read_tsv("data/maps/villages.csv") # villages, coordinates and languages
lang <- read_tsv("data/maps/languages.csv") # languages, affiliation and glottocodes
col <- read_tsv("data/maps/colors.csv") # color schemes
glot <- read_tsv("data/maps/glottolog_points.csv") # language coordinates from Glottolog
market <- read_tsv("data/maps/market_languages.csv") # distribution of so called "market languages" in the eastern Caucasus
sys <- read_tsv("data/features/systems.csv") # evidential systems per language
sys <- merge(sys, lang, by = "lang")
sys <- merge(sys, glot, by = "lang")
pf <- read_tsv("data/features/perfects.csv") # perfects and their meanings
part <- read_tsv("data/features/particles.csv") # particles with evidential(ish) meanings
es <- read_tsv("data/surveys/es.csv") # load data from evidentiality survey
pq <- read_tsv("data/surveys/pq.csv") # load data from perfect questionnaire
pn <- read_tsv("data/surveys/pn.csv") # load data from narrative test
narr <- read_tsv("data/narrative/narr.csv") # load data from narrative texts
meta <- read_tsv("data/narrative/meta.csv") # load metadata for the narrative texts
dataperf <- pf %>%
select(form, evidential, meaning, lang, idiom, bib, page)
for (i in seq_along(dataperf$bib))
{
if (grepl("; ", dataperf$bib[[i]], fixed = TRUE) == TRUE)
{
cits = strsplit(dataperf$bib[[i]], "; ")
for (j in seq_along(cits))
{
cits[[j]] <- RefManageR::Cite(bib = bib_feat, cits[[j]], .opt = list(max.names = 2))
}
dtable$source[[i]] = paste(cits, sep = "; ")
}
else
{
dataperf$bib[[i]] <- RefManageR::Cite(bib = bib_feat, dataperf$bib[[i]], .opt = list(max.names = 2))
}
}
dataperf <- pf %>%
select(form, evidential, meaning, lang, idiom, bib, page)
for (i in seq_along(dataperf$bib))
{
if (grepl("; ", dataperf$bib[[i]], fixed = TRUE) == TRUE)
{
cits = strsplit(dataperf$bib[[i]], "; ")
for (j in seq_along(cits))
{
cits[[j]] <- RefManageR::Cite(bib = bib_feat, cits[[j]], .opt = list(max.names = 2))
}
dataperf$bib[[i]] = paste(cits, sep = "; ")
}
else
{
dataperf$bib[[i]] <- RefManageR::Cite(bib = bib_feat, dataperf$bib[[i]], .opt = list(max.names = 2))
}
}
colnames(dataperf)[4] <- c("function")
datatable(dataperf, class = 'cell-border stripe', rownames = F, filter = 'top', options = list(pageLength = 70, autoWidth = T, info = FALSE, paginate = FALSE))
PrintBibliography(bib_feat,)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(DT)
library(tidyverse)
library(lingtypology)
library(ggpubr)
# necessary data
trans <- read_tsv("data/transcription_correspondences.csv") # transcription correspondences
vill <- read_tsv("data/maps/villages.csv") # villages, coordinates and languages
lang <- read_tsv("data/maps/languages.csv") # languages, affiliation and glottocodes
col <- read_tsv("data/maps/colors.csv") # color schemes
glot <- read_tsv("data/maps/glottolog_points.csv") # language coordinates from Glottolog
market <- read_tsv("data/maps/market_languages.csv") # distribution of so called "market languages" in the eastern Caucasus
sys <- read_tsv("data/features/systems.csv") # evidential systems per language
sys <- merge(sys, lang, by = "lang")
sys <- merge(sys, glot, by = "lang")
pf <- read_tsv("data/features/perfects.csv") # perfects and their meanings
part <- read_tsv("data/features/particles.csv") # particles with evidential(ish) meanings
es <- read_tsv("data/surveys/es.csv") # load data from evidentiality survey
pq <- read_tsv("data/surveys/pq.csv") # load data from perfect questionnaire
pn <- read_tsv("data/surveys/pn.csv") # load data from narrative test
narr <- read_tsv("data/narrative/narr.csv") # load data from narrative texts
meta <- read_tsv("data/narrative/meta.csv") # load metadata for the narrative texts
pf$lang <- factor(pf$lang, levels = c("Ingush", "Chechen", "Bats", "Bezhta", "Hinuq", "Hunzib", "Khwarshi", "Tsez", "Avar", "Akhvakh", "Andi", "Bagvalal", "Botlikh", "Chamalal", "Godoberi", "Karata", "Tindi", "Dargwa", "Lak", "Agul", "Archi", "Budukh", "Kryz", "Lezgian", "Rutul", "Tabasaran", "Tsakhur", "Udi", "Khinalug", "Kumyk", "Nogai", "Azerbaijani"))
map.feature(lang.gltc(pf$gltc),
features = pf$res,
title = "Language",
color = sys_col$datacol,
width = 5,
stroke.features = sys_col$perfect,
stroke.color = c("grey", "white"),
stroke.title = "Resultative",
stroke.radius = 13,
label = sys_col$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"))
pf$lang <- factor(pf$lang, levels = c("Ingush", "Chechen", "Bats", "Bezhta", "Hinuq", "Hunzib", "Khwarshi", "Tsez", "Avar", "Akhvakh", "Andi", "Bagvalal", "Botlikh", "Chamalal", "Godoberi", "Karata", "Tindi", "Dargwa", "Lak", "Agul", "Archi", "Budukh", "Kryz", "Lezgian", "Rutul", "Tabasaran", "Tsakhur", "Udi", "Khinalug", "Kumyk", "Nogai", "Azerbaijani"))
map.feature(lang.gltc(pf$gltc),
features = pf$res,
title = "Language",
color = sys_col$datacol,
width = 5,
stroke.features = sys_col$perfect,
stroke.color = c("grey", "white"),
stroke.title = "Resultative",
stroke.radius = 13,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"))
pf$lang <- factor(pf$lang, levels = c("Ingush", "Chechen", "Bats", "Bezhta", "Hinuq", "Hunzib", "Khwarshi", "Tsez", "Avar", "Akhvakh", "Andi", "Bagvalal", "Botlikh", "Chamalal", "Godoberi", "Karata", "Tindi", "Dargwa", "Lak", "Agul", "Archi", "Budukh", "Kryz", "Lezgian", "Rutul", "Tabasaran", "Tsakhur", "Udi", "Khinalug", "Kumyk", "Nogai", "Azerbaijani"))
map.feature(lang.gltc(pf$gltc),
features = pf$lang,
title = "Language",
color = sys_col$datacol,
width = 5,
stroke.features = pf$res,
stroke.color = c("grey", "white"),
stroke.title = "Resultative",
stroke.radius = 13,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"))
pf$lang <- factor(pf$lang, levels = c("Ingush", "Chechen", "Bats", "Bezhta", "Hinuq", "Hunzib", "Khwarshi", "Tsez", "Avar", "Akhvakh", "Andi", "Bagvalal", "Botlikh", "Chamalal", "Godoberi", "Karata", "Tindi", "Dargwa", "Lak", "Agul", "Archi", "Budukh", "Kryz", "Lezgian", "Rutul", "Tabasaran", "Tsakhur", "Udi", "Khinalug", "Kumyk", "Nogai", "Azerbaijani"))
map.feature(lang.gltc(pf$gltc),
features = pf$lang,
title = "Language",
color = pf$datacol,
width = 5,
stroke.features = pf$res,
stroke.color = c("grey", "white"),
stroke.title = "Resultative",
stroke.radius = 13,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"))
pf$lang <- factor(pf$lang, levels = c("Ingush", "Chechen", "Bats", "Bezhta", "Hinuq", "Hunzib", "Khwarshi", "Tsez", "Avar", "Akhvakh", "Andi", "Bagvalal", "Botlikh", "Chamalal", "Godoberi", "Karata", "Tindi", "Dargwa", "Lak", "Agul", "Archi", "Budukh", "Kryz", "Lezgian", "Rutul", "Tabasaran", "Tsakhur", "Udi", "Khinalug", "Kumyk", "Nogai", "Azerbaijani"))
map.feature(lang.gltc(pf$gltc),
features = pf$res,
title = "Resultative",
color = c("grey", "white"),
width = 5,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"))
pf$lang <- factor(pf$lang, levels = c("Ingush", "Chechen", "Bats", "Bezhta", "Hinuq", "Hunzib", "Khwarshi", "Tsez", "Avar", "Akhvakh", "Andi", "Bagvalal", "Botlikh", "Chamalal", "Godoberi", "Karata", "Tindi", "Dargwa", "Lak", "Agul", "Archi", "Budukh", "Kryz", "Lezgian", "Rutul", "Tabasaran", "Tsakhur", "Udi", "Khinalug", "Kumyk", "Nogai", "Azerbaijani"))
map.feature(lang.gltc(pf$gltc),
features = pf$res,
title = "Resultative",
color = "white",
width = 5,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"))
map.feature(lang.gltc(pf$gltc),
features = pf$res,
color = "white",
width = 10,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas")) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$cr,
color = "white",
width = 8,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
map.feature(lang.gltc(pf$gltc),
features = pf$res,
color = "white",
width = 10,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas")) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$cr,
color = "darkgrey",
width = 5,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
map.feature(lang.gltc(pf$gltc),
features = pf$res,
color = "white",
width = 10,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas")) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$cr,
color = "darkgrey",
width = 5,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$evidential,
shape = T,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
map.feature(lang.gltc(pf$gltc),
features = pf$res,
color = "white",
width = 10,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas")) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$cr,
color = "darkgrey",
width = 5,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$evidential,
shape =  c("â—†"),
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
map.feature(lang.gltc(pf$gltc),
features = pf$res,
color = "white",
width = 20,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas")) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$cr,
color = "darkgrey",
width = 12,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$evidential,
shape =  c("â—†"),
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
map.feature(lang.gltc(pf$gltc),
features = pf$res,
color = "white",
width = 15,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas")) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$cr,
color = "darkgrey",
width = 11,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$evidential,
shape =  c("â—†"),
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
map.feature(lang.gltc(pf$gltc),
features = pf$res,
color = "white",
width = 13,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas")) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$cr,
color = "darkgrey",
width = 9,
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .) %>%
map.feature(lang.gltc(pf$gltc),
features = pf$evidential,
shape =  c("â—†"),
label = pf$lang,
zoom.level = 7,
popup = paste("Source(s):", pf$corr_ref),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
pq$speaker_id <- paste(pq$language, pq$speaker, sep = " ")
pexp <- pq[(pq$exp == "perfect"),]
ggplot(pexp, aes(x = given, fill = speaker_id)) +
geom_bar(position = "dodge")+
theme_classic()
ggplot(pn, aes(x = speaker, fill = given)) +
geom_bar(position = "fill")+
facet_wrap(~context)+
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
narrmeta <- merge(narr, meta, by = "seq_nr")
sum <- narrmeta %>%
select(language, form, persp) %>%
filter(persp %in% c("direct", "indirect")) %>%
group_by(form, language, persp) %>%
mutate(total = n())
ggdotchart(sum, x = "form", y = "total",
color = "persp",
palette = c("navy", "mediumorchid1"),
sorting = "descending",
add = "segments",
dot.size = 2,
facet.by = "language",
xlab = "",
ylab = "",
rotate = TRUE)
dir_indir <- narrmeta %>%
filter(persp %in% c("direct", "indirect")) %>%
filter(p %in% c("pf", "pst")) %>%
filter(complete.cases(p))
ggplot(dir_indir, aes(x = persp, fill = p)) +
geom_bar(stat = "count")+
facet_wrap(~lang)+
theme_classic()
